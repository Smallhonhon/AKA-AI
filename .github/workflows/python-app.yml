# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test_linux:
    runs-on:
      - ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Test with pytest
        env:
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_MODEL: ${{ secrets.AZURE_OPENAI_MODEL }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_EMBEDDING_NAME: ${{ secrets.AZURE_OPENAI_EMBEDDING_NAME }}
          AZURE_COSMOSDB_ACCOUNT: ${{ secrets.AZURE_COSMOSDB_ACCOUNT }}
          AZURE_COSMOSDB_DATABASE: ${{ secrets.AZURE_COSMOSDB_DATABASE }}
          AZURE_COSMOSDB_CONVERSATIONS_CONTAINER: ${{ secrets.AZURE_COSMOSDB_CONVERSATIONS_CONTAINER }}
          AZURE_COSMOSDB_ACCOUNT_KEY: ${{ secrets.AZURE_COSMOSDB_ACCOUNT_KEY }}
          AZURE_SEARCH_SERVICE: ${{ secrets.AZURE_SEARCH_SERVICE }}
          AZURE_SEARCH_INDEX: ${{ secrets.AZURE_SEARCH_INDEX }}
          AZURE_SEARCH_KEY: ${{ secrets.AZURE_SEARCH_KEY }}
          AZURE_SEARCH_QUERY: ${{ secrets.AZURE_SEARCH_QUERY }}
          ELASTICSEARCH_EMBEDDING_MODEL_ID: ${{ secrets.ELASTICSEARCH_EMBEDDING_MODEL_ID }}
          ELASTICSEARCH_ENCODED_API_KEY: ${{ secrets.ELASTICSEARCH_ENCODED_API_KEY }}
          ELASTICSEARCH_ENDPOINT: ${{ secrets.ELASTICSEARCH_ENDPOINT }}
          ELASTICSEARCH_INDEX: ${{ secrets.ELASTICSEARCH_INDEX }}
          ELASTICSEARCH_QUERY: ${{ secrets.ELASTICSEARCH_QUERY }}
        run: |
          export PYTHONPATH=$(pwd)
          coverage run -m pytest -v --show-capture=stdout
          coverage report -m --include=app.py,backend/*,tests/*
          coverage xml

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "50 80"

  test_windows:
    runs-on:
      - windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Test with pytest
        run: |
          $env:PYTHONPATH=$pwd
          pytest -v --show-capture=stdout -k "not integration"
